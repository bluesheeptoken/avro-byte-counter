name: Build and upload to PyPI

on: pull_request

jobs:
  test:
    name: Unit test and linters
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: cache poetry install
        uses: actions/cache@v3
        with:
          path: ~/.local
          key: poetry-1.5.1
      - uses: snok/install-poetry@v1
        with:
          version: 1.5.1
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: cache deps
        id: cache-deps
        uses: actions/cache@v2
        with:
          path: .venv
          key: pydeps-${{ hashFiles('**/poetry.lock') }}
      - run: poetry install --no-interaction --no-root
        if: steps.cache-deps.outputs.cache-hit != 'true'
      - run: poetry install --no-interaction
      - run: poetry run poe test
      - run: poetry run poe check-lint

  build_wheels:
    needs: [test]
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
        # Ubuntu
          - os: ubuntu-latest
            python: 38
            platform_id: manylinux_x86_64
          - os: ubuntu-latest
            python: 39
            platform_id: manylinux_x86_64
          - os: ubuntu-latest
            python: 310
            platform_id: manylinux_x86_64
          - os: ubuntu-latest
            python: 311
            platform_id: manylinux_x86_64

          # MacOS x86_64
          - os: macos-latest
            python: 38
            platform_id: macosx_x86_64
          - os: macos-latest
            python: 39
            platform_id: macosx_x86_64
          - os: macos-latest
            python: 310
            platform_id: macosx_x86_64
          - os: macos-latest
            python: 311
            platform_id: macosx_x86_64

    steps:
      - uses: actions/checkout@v3

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.13.0
        env:
          CIBW_ARCHS: all
          CIBW_BUILD_VERBOSITY: 1

      - uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    needs: [test]
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz

#  upload_pypi:
#    needs: [build_wheels, build_sdist]
#    runs-on: ubuntu-latest
#    # upload to PyPI on every tag starting with 'v'
#    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
#    # alternatively, to publish when a GitHub Release is created, use the following rule:
#    # if: github.event_name == 'release' && github.event.action == 'published'
#    steps:
#      - uses: actions/download-artifact@v3
#        with:
#          # unpacks default artifact into dist/
#          # if `name: artifact` is omitted, the action will create extra parent dir
#          name: artifact
#          path: dist
#
#      - uses: pypa/gh-action-pypi-publish@v1.5.0
#        with:
#          user: __token__
#          password: ${{ secrets.pypi_password }}
#          # To test: repository_url: https://test.pypi.org/legacy/
